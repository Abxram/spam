# -*- coding: utf-8 -*-
"""Spam Detection Web App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RlSddmTCJb2SydNh4WAisbE19Y7HXNgf
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import re
import string
import nltk
from nltk.corpus import stopwords
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import pickle
import streamlit as st

# Ensure NLTK stopwords are downloaded
try:
    stopwords.words('english')
except LookupError:
    nltk.download('stopwords')

# --- 1. Dataset Preparation & Cleaning ---

# Define the path for the dataset.
# In a real deployment, you would ensure this file is accessible.
# For this example, we'll assume it's in the same directory or provide a download link.
# If you don't have the dataset, you can download it from:
# https://archive.ics.uci.edu/ml/datasets/sms+spam+collection
# Name the file 'SMSSpamCollection.txt'
try:
    df = pd.read_csv('SMSSpamCollection.txt', sep='\t', header=None, names=['label', 'message'])
except FileNotFoundError:
    st.error("Error: 'SMSSpamCollection.txt' not found.")
    st.info("Please download the dataset from https://archive.ics.uci.edu/ml/datasets/sms+spam+collection and save it as 'SMSSpamCollection.txt' in the same directory as this script.")
    st.stop() # Stop execution if file is not found

# Map labels to numerical values for easier processing
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Text cleaning function
def preprocess_text(text):
    # Convert text to lowercase
    text = text.lower()
    # Remove punctuation
    text = ''.join([char for char in text if char not in string.punctuation])
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    text = ' '.join([word for word in text.split() if word not in stop_words])
    # Remove numbers (optional, but good for spam detection)
    text = re.sub(r'\d+', '', text)
    return text

# Apply the cleaning function to the message column
df['cleaned_message'] = df['message'].apply(preprocess_text)

# --- 2. Text Vectorization ---

# Initialize TF-IDF Vectorizer
tfidf_vectorizer = TfidfVectorizer(max_features=5000) # Limiting features to avoid sparsity and improve performance

# Fit and transform the cleaned messages
X = tfidf_vectorizer.fit_transform(df['cleaned_message'])
y = df['label']

# --- 3. Model Training ---

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Multinomial Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

# Evaluate the model (optional, but good for understanding performance)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Model Accuracy: {accuracy:.4f}")
print(f"Model Precision: {precision:.4f}")
print(f"Model Recall: {recall:.4f}")
print(f"Model F1-Score: {f1:.4f}")

# --- 4. Save the Model and Vectorizer ---

# Save the trained model
with open('spam_model.pkl', 'wb') as model_file:
    pickle.dump(model, model_file)

# Save the TF-IDF vectorizer
with open('tfidf_vectorizer.pkl', 'wb') as vectorizer_file:
    pickle.dump(tfidf_vectorizer, vectorizer_file)

st.success("Model and Vectorizer trained and saved successfully!")

# --- 5. Web App Development using Streamlit ---

st.title("‚úâÔ∏è SMS Spam Detector")
st.markdown("""
    Enter an SMS message below and click 'Predict' to find out if it's spam or not!
""")

# Load the saved model and vectorizer for the web app
@st.cache_resource # Cache the loading to avoid reloading on every rerun
def load_resources():
    try:
        with open('spam_model.pkl', 'rb') as model_file:
            loaded_model = pickle.load(model_file)
        with open('tfidf_vectorizer.pkl', 'rb') as vectorizer_file:
            loaded_vectorizer = pickle.load(vectorizer_file)
        return loaded_model, loaded_vectorizer
    except FileNotFoundError:
        st.error("Error: Model or Vectorizer files not found. Please ensure 'spam_model.pkl' and 'tfidf_vectorizer.pkl' are in the same directory.")
        st.stop()

loaded_model, loaded_vectorizer = load_resources()

# User input text area
user_input = st.text_area("Enter your SMS message here:", height=150)

# Prediction button
if st.button("Predict"):
    if user_input:
        # Preprocess the user input
        cleaned_input = preprocess_text(user_input)

        # Transform the input using the loaded vectorizer
        input_vectorized = loaded_vectorizer.transform([cleaned_input])

        # Make prediction
        prediction = loaded_model.predict(input_vectorized)

        # Display result
        if prediction[0] == 1:
            st.warning("üö® This message is likely **SPAM!**")
        else:
            st.success("‚úÖ This message is **Not Spam.** (Ham)")
    else:
        st.info("Please enter a message to predict.")

st.markdown("---")
st.markdown("Developed using Python, Scikit-learn, and Streamlit.")